// Завдання до виконання мовою JavaScript
// Ділан і Кейт хочуть подорожувати між кількома містами А, В, С.... Кейт має на аркуші паперу список відстаней між цими містами. ls = [51, 56, 58, 59, 61]. Ділан втомився їздити, і він каже Кейт, що не хоче їхати більше t = 174 милі, і він відвідає лише 3 міста. Які відстані, а отже, які міста вони оберуть, щоб сума відстаней була якомога більшою, щоб догодити Кейт та Ділану?

// Приклад:
// Маючи список ls та 3 міста для відвідування, вони можуть зробити вибір між:
// ls = [51, 56, 58, 59, 61];
// [51,56,58], [51,56,59], [51,56,61], [51,58,59], [51, 58,61], [51,59,61], [56,58,59], [56,58,61], [56,59,61], [58,59,61].

// Тоді суми відстаней складають: 165, 166, 168, 168, 170, 171, 173, 175, 176, 178.

// Найбільшою можливою сумою з урахуванням обмеження в 174 є 173, а відстані до 3 відповідних міст - [56, 58, 59].

// Функція chooseOptimalDistance приймає параметри:
// t (максимальна сума відстаней, ціле число >= 0),
// k (кількість міст, які потрібно відвідати, k> = 1),
// ls (список відстаней, всі відстані є додатними або нульовими цілими числами, і цей список містить принаймні один елемент).

// Функція повертає "найкращу" суму, тобто найбільшу можливу суму k відстаней, менших або рівних заданій межі t, якщо ця сума існує, або якщо не існує - null.
// Примітка: не змінюйте змінну ls.

// Важливо: треба вирішити завдання для будь-якого k, а не тільки 3.

// Початковий код
const chooseOptimalDistance = (t, k, ls) => {
  t = 174;
  k = 3;
  ls = [51, 56, 58, 59, 61];
  console.log(ls);
  // - 107 | 114 | 117 | 120 |
  const arr = [];

  // let maxDistance = arr[0];
  let summ = 0;
  let counter = 0;

  for (let i = 0; i < ls.length; i++) {
    summ = ls[i];
    counter++;
    console.log("counter : " + counter);
    console.log(`ls[${i}] - ${summ}`);
    let n = 0;

    for (let j = 1; j < k; j++) {
      summ += ls[i + j];
      counter++;
      console.log("counter : " + counter);
      console.log(`ls[${i}] + ls[${j}] | summ = ${summ}`);

      if (j === k - 1 && i + j + n < ls.length) {
        arr.push(summ);
        // summ -= ls[i + j];

        summ -= ls[i + j];
        counter--;

        n++;
        console.log(`______________double loop cycle__№: ${n}____________`);

        summ -= ls[i + j + n - 1];
        summ += ls[i + j + n];

        console.log("counter : " + counter);
        console.log(`ls[${i}] + ls[${j + n}] | summ = ${summ}`);

        counter++;
        j--;
        console.log(`____________________________________________________`);
      } else if (j === k - 1 && i + j + n === ls.length - 1) {
        arr.push(summ);
        console.log("______________END OF LOOP______________");
        summ = summ - ls[i + j + n];
        n++;
        summ += ls[i + j + n];
      }
    }
    arr.push(summ);
    console.log(arr);
  }
  // arr.push(summ);
  return console.log(arr);

  // return null;
};

chooseOptimalDistance();

// chooseOptimalDistance(174, 3, [51, 56, 58, 59, 61]); //173
// chooseOptimalDistance(163, 3, [50]); // null
